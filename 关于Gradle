1、自动化构建工具
依赖管理、测试、打包、发布上传
Gradle和Maven的主要差别是不用XML，用基于Groovy的特定领域语言
Gradle：环境变量，%GRADLE_HOME%\bin;
init.d目录存放启动初始化脚本，lib目录里是gradle自身依赖的jar包，media就只是些图标文件。
Groovy是用于Java虚拟机的一种敏捷的动态语言，既可以用于面向对象编程，又可以用于纯粹的脚本语言。

2、关于 Groovy
Groovy完全兼容Java的语法
分号是可选的
类、方法默认是public的，没有default之说
编译器给属性自动添加getter/setter方法
属性可以直接点获取
最后一个表达式的值会被作为返回值，即return可以不写？
==等同于equals()，不会有NullPointerExceptions
可选类型定义(弱类型的编程语言)，类型是自动推断出来的
调用方法时的括号可不写？集合API更简单。
闭包

3、Groovy代码示例
def version=1
println version //println(version)
def s1='huige'
def s2="gradle version is ${version}"	//可以写入变量
def s3='''my
name is
huige'''	//换行会保存在字符串中
assert version == 2
//集合api
def list=['ant','maven']
list << 'gradle'
assert list.getClass()=ArrayList
def map=['ant':2000,'maven':2004]	
map.gradle=2009 //或者 map['gradle']=2009
println map.getClass() //java.util.LinkedHashMap
//闭包，闭包就是个代码块，像方法一样，可以有参数或无参数，闭包可以被赋值给一个变量，也可以作为一个参数传递给一个方法。
def c1={
	v ->
		println v
}
def c2={
	pringln 'hello'
}
def method1(Closure closure){
	closure('param')
}
def method2(Closure closure){
	closure()
}
method1(c1);
method2(c2);

4、简单的gradle构建脚本：
//构建脚本中默认是有一个Project实例的
apply plugin:'java'	//调用apply方法，传入名为plugin的参数？
version ='0.1'		//Project里的version变量
repositories {		//调用 repositories 方法，闭包作为参数传入(中括号包裹着的就是闭包)
	mavenCentral()
}
dependencies {		//调用 dependencies 方法，闭包作为参数传入(中括号包裹着的就是闭包)
	compile 'common-codec:commons-codec:1.6'
}
